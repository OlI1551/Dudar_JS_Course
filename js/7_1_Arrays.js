/* Массивы позволяют хранить большой объем информации в одном месте.
В языке JavaScript можно найти несколько основных типов массивов. 

Одномерный массив
Одномерный массив состоит из нескольких элементов,
объединенных под одним именем.
Чтобы создать массив необходимо создать переменную и присвоить ей
значение new Array(). Внутри вы можете через запятую записывать
различные значения, которые и будут элементами массива.

В массивах отсчет начинается с 0, поэтому первый элемент по индексу будет равен 0,
второй - 1 и так далее.

Примеры создания массива: */
var some = new Array(); // Создание пустого массива
some[0] = '1'; // Добавление 1 элемента
some[1] = 2; // Добавление 2 элемента
console.log(some[0]); // Вывод первого элемента
var array = new Array(1, 5, 2); // Создание массива со значениями сразу же

/* Работать с элементами массива можно точно как с переменными.
Мы можем их выводить или же устанавливать для них новые значения.

Для массивов существует несколько дополнительных функций,
которые ещё будут изучены в ходе курса.
Сейчас был изучен лишь метод length, который позволяет получить длину всего массива.

Пример метода: */
var elements = new Array(23, 6, 0, true, "Первый");
// Выведет значение 5, так как в массиве 5 элементов
console.log(elements.length);

/* Сперва массивы могут показаться бесполезными, но на самом деле это не так.
В дальнейшем вы сможете понять всю важность массивов.

Многомерные массивы
Многомерный массив - это массив, в котором каждый элемент является другим массивом.
На практике очень редко используются массивы с более чем третим уровнем вложенности.
То есть массивы, в которых все элементы являются другими массивами
и в котором все элементы также другие массивы встречаются очень и очень редко на практике.

Мы не будем изучать подобные массивы, так как принцип их построения точно такой же
как при работе с двумерными массивами.

Для создания двумерных массивов необходимо использовать
двойные квадратные скобки после типа данных.

Выглядит такой массив как матрица, а записывается следующим образом: */
var x = new Array(new Array(0, 34, 2), new Array(3, 4, 5));
console.log(x[0][1]); // Выведет 34
// Можно их сразу не присваивать
var symbols = new Array(new Array(), new Array());
symbols [0][1] = 'A';

/* Мы видим, что элементы первого массива являются другими массивами.
Чтобы выбрать какой-либо объект используйте ту же структуру
что и для одномерных массивов, вот только теперь указывайте индекс как первого массива,
так и второго: */
x[0][1] = 1; // Вместо 34 теперь будет 1

var arr1 = [];
arr1 [0] = 1;
arr1 [1] = 2;
arr1 [2] = 3;
var arr2 = [1, 2, 3];
// нет строгого типизирования - типизация переменных не строгая, можно добавлять любые типы данных
var arr3 = [1, "stroka", 5.4, true, false, 7, 0, -100];
console.log(arr3);
console.log(arr3[1]);
var matrix = [[], [], []];
var matrix1 = [[1, 2, 3], [5.4, 'строка'], [false]];
var matrix2 = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]
matrix2 [1] [1] = 'уже поменяли';
console.log(matrix2);