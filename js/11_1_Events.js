/* В HTML есть специальные атрибуты для каждого тега,
которые способны вызвать функцию при определенном действии пользователя.
Такие обработчики могут срабатывать в определенное событие:
нажатие, наведение мышки, двойной клик, выбор элемента и так далее.

В качестве значения для атрибута можно поместить функцию,
которая будет вызываться каждый раз при срабатывании события.
К примеру, если мы хотим вызвать всплывающее окно при двойном клике на текст,
то стоит записать следующий HTML-код: 

<p ondblclick="testFunction()">Нажмите два раза</p>

При двойном нажатии будет вызываться функция testFunction.
Осталось лишь добавить саму функцию: */

function testFunction() {
	alert("Вы нажали два раза!");
}
/* Вы также можете передать неограниченное количество параметров в саму функцию.
Для этого при вызове функции в круглых скобках записывайте значения для передачи данных. */

function onClickButton() {
    alert("А вот сейчас нажали на кнопку с вызовом функции в отдельном JS-файле!");
}

var counter = 0; // обязательно нужно создать глобальную переменную в файле скрипта
// иначе она не будет сохраняться и будет создаваться заново каждый раз при вызове функции
function countPressing() {
    counter++;
    console.log(counter);

}

var counterForButton = 0;
function buttonWithObject(button) {
    counterForButton++;
    button.innerHTML = "Вы нажали на кнопку: " + counterForButton;

    console.log(button.name);
    console.log(button.onclick);

}

function onInput(el) {
    if (el.value == "Hello")
        alert("И тебе привет!");
    console.log(el.value);
}

function colourChange(button) {
    // button.style.background = "red"; // можно так обратиться к свойству (элементу) css-стиля и поменять его
    // button.style.color = "blue";
    
    button.style.cssText = "border-radius: 5px; border: 0; font-size: 20px; background: red; color: blue";
    // записываешь стили, как будто они внутри css-файла
    // если использовать обращение к стилям, то обращение к отдельным элементам престанет действовать
}