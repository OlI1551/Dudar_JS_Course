/* Функции можно назвать небольшими подпрограммами,
куда можно вынести повторяющийся код и обращаться к нему,
когда это будет нужно.
Функции значительно облегчают построение программ,
так как нам не надо копировать однотипный код множество раз,
а можно просто воспользоваться одной общей функцией.

Многие путают функции и методы и не понимают отличий между ними.
На самом деле отличий нет, так как что методы, что функции являются одним и тем же.
Функции что записаны вне классов называют функциями,
а функции что записаны внутри классов называются методами. 

Точно такая же ситуация обстоит с переменным.
В классах переменные называются полями, а вне классов - переменными.

В JS функции создаются при помощи ключевого слова function.
Каждая функция может иметь какие-либо параметры или же не иметь их вовсе.
Функции способны что-либо возвращать в ходе выполнения кода, если это требуется.


Создание функции
На основе всех данных наша функция будет выглядеть следующим образом: */

function test() {
	console.log("Вывод чего-либо в консоль");
}
/* Функция выше не принимает никаких параметров и ничего не возвращает.
Она просто пишет слово в консоль.

Давайте разнообразим функцию и добавим параметр: */

function test(word) {
	console.log(word);
}
/* Теперь функция принимает параметр, который будет отображен в консоли.

Если функция должна что-либо вернуть,
то прописываем тип данных который будет возвращен.
Для возвращения данных используем ключевое слово return: */

function test(some_number) {
	some_number *= 2;
	return some_number;
}

/* Локальные и глобальные переменные
В JavaScript есть несколько полей видимости: локальная и глобальная.
Если записать глобальную переменную,
то такая переменная будем видна повсюду и с ней можно работать отовсюду в документе.
Если записать локальную переменную,
то такая переменная будет видна лишь в той области, где она записана.

Для создания глобальной переменной её необходимо прописать вне функции, класса или же объекта.
Для создания локальных переменных вам достаточно поместить переменную в функцию.
Переменная в функции будет видна лишь внутри блока с функцией и нигде более. */

function info() {
    console.log("Привет");
    console.log('!');
}
info();
info();
info();
info();
info();

function infoNew(word) {
    console.log(word + "!");
}
infoNew(); // будет ошибка (скорее даже информационное сообщение) -  undefined
infoNew("Hello");

function sumNumbers (a, b) {
    var res = a + b;
    console.log(res);
    infoNew(res); // из одной функции можно вызывать другую функцию
    // но нельзя создать еще одну функцию!!!
}

function summa(arr) {
    var sum = 0;
    for (var i = 0; i < arr.length; i++)
        sum += arr[i];
    console.log(sum);      
}
var array = [6, 8, 1];
summa(array);
var array_2 = [6, 8, 1, 7];
var array_3 = [6, 8, 1, 90];
summa(array_2);
summa(array_3);

function summa2(arr) {
    var sum = 0;
    for (var i = 0; i < arr.length; i++)
        sum += arr[i];
    return sum;     
}

var result = summa2(array);
result *= 2;
console.log("Результат: " + result);

// Локальные и глобальные переменные
var number = 10; // глобальная переменная
function information() {
    console.log(number);
}
information();

function information_2() {
    var numberNew = 20; // локальная переменная
    console.log(numberNew);
}
consolw.log(numberNew); // будет ошибка (помечено красным) - numberNew not defined
// Переменная, созданная внутри функции - локальная переменная
// Переменная, созданная вне функции - глобальная
// могут быть локальные переменные с именами, одинаковыми с именами глобальных переменных